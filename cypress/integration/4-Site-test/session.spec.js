describe('should check session and cookies', () => {
    beforeEach(() => {
        cy.visit('https://the-internet.herokuapp.com/login')
    })

    it('should make login without session', () => {
        cy.get('#username').type('tomsmith')
        cy.get('#password').type('SuperSecretPassword!')
        cy.get('form').contains('Login').click()
        cy.url().should('contain', '/secure')
    })

    it('should make login using session from cypress and checking all the cookies generated by default', () => {
        cy.session('tom', () => {
            cy.visit('https://the-internet.herokuapp.com/login')
            cy.wait(3000)
            cy.get('#username').type('tomsmith')
            cy.get('#password').type('SuperSecretPassword!')
            cy.get('form').contains('Login').click()
            cy.url().should('contain', '/secure')
            cy.getCookies().should('have.length', 5).then((cookie) => {
                expect(cookie[0]).to.have.property('name', 'optimizelyPendingLogEvents')
                expect(cookie[1]).to.have.property('name', 'optimizelySegments')
                expect(cookie[2]).to.have.property('name', 'optimizelyEndUserId')
                expect(cookie[3]).to.have.property('name', 'optimizelyBuckets')
                expect(cookie[4]).to.have.property('name', 'rack.session')
            })
            // limpio y valido que no existan cookies
            cy.clearCookies()
            cy.getCookies().should('have.length', 0)

        })
    })

    it('should make login using session from cypress and checking an specific cookies ', () => {
        cy.session('tom', () => {
            cy.visit('https://the-internet.herokuapp.com/login')
            cy.wait(3000)
            cy.get('#username').type('tomsmith')
            cy.get('#password').type('SuperSecretPassword!')
            cy.get('form').contains('Login').click()
            cy.url().should('contain', '/secure')
            cy.getCookie('optimizelyPendingLogEvents').should('exist')
            // esta cookie siempre cambia, ya que es dinamica
            cy.getCookie('optimizelyPendingLogEvents').should('not.have.property', 'value', '%5B%22n%3Dhttps%253A%252F%252Fthe-internet.herokuapp.com%252Fsecure%26u%3Doeu1678091720807r0.22324146037381642%26wxhr%3Dtrue%26t%3D1678091725165%26f%3D298349752%2C318188263%22%2C%22n%3Dengagement%26g%3D298283957%26u%3Doeu1678091720807r0.22324146037381642%26wxhr%3Dtrue%26t%3D1678091723971%26f%3D298349752%2C318188263%22%2C%22n%3Dhttps%253A%252F%252Fthe-internet.herokuapp.com%252Flogin%26u%3Doeu1678091720807r0.22324146037381642%26wxhr%3Dtrue%26t%3D1678091720810%26f%3D298349752%2C318188263%22%5D')
            cy.getCookie('optimizelyPendingLogEvents').should('not.be.null')
            // limpia una cookie especifica y luego validamos que esta vacia
            cy.clearCookie('optimizelyBuckets')
            cy.getCookie('optimizelyBuckets').should('be.null')
        })
    })

    it('should make login without session at SET SOME COOKIES', () => {
        cy.get('#username').type('tomsmith')
        cy.get('#password').type('SuperSecretPassword!')
        cy.get('form').contains('Login').click()
        cy.url().should('contain', '/secure')
        cy.setCookie('CookieCheck', 'testCookie')
        cy.getCookie('CookieCheck').should('have.property', 'value', 'testCookie')
    })
})